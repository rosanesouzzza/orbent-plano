
import { GoogleGenAI, Type } from "@google/genai";
import { ActionItem, SuggestedActionItem, ActionType, PlanReason, ActionPriority } from '../types';
import { validResponsibles } from "../data/responsibles";
import { strategicPillars } from "../data/strategicPillars";
import { safeFormatDate } from "../utils/dateUtils";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

export const rewriteText = async (textToRewrite: string, fieldContext: string): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }

  const prompt = `
    Aja como um redator profissional especializado em comunica√ß√£o empresarial clara e concisa.
    Sua tarefa √© reescrever o texto a seguir para que seja mais profissional, claro e alinhado com o tom da Orbent.

    **Contexto do Campo:** ${fieldContext}
    **Texto Original:** "${textToRewrite}"

    **Diretrizes:**
    - Mantenha o significado original.
    - Melhore a clareza e a gram√°tica.
    - Use um tom profissional e objetivo.
    - A sa√≠da deve ser APENAS o texto reescrito, sem introdu√ß√µes, despedidas ou formata√ß√£o extra.

    **Texto Reescrito:**
  `;

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
    });
    return response.text.trim();
  } catch (error) {
    console.error("Error rewriting text with Gemini:", error);
    throw new Error("Ocorreu um erro ao reescrever o texto. Por favor, tente novamente.");
  }
};


export const generateExecutiveSummary = async (items: ActionItem[], planName: string, clientName: string, planReason: PlanReason, creatorName: string): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }

  const prompt = `
    Aja como um consultor de gest√£o s√™nior da Orbent.
    Sua tarefa √© gerar o conte√∫do textual para um "Relat√≥rio de Plano de A√ß√£o" para o cliente **${clientName}**, seguindo estritamente a estrutura e o tom institucional da Orbent.

    **INFORMA√á√ïES DE CONTEXTO:**
    - **Cliente:** ${clientName}
    - **Plano de A√ß√£o:** ${planName}

    ---
    
    **ESTRUTURA OBRIGAT√ìRIA DA SA√çDA (MARKDOWN):**
    
    ### Sum√°rio Executivo
    Redija o Sum√°rio Executivo do Plano de A√ß√£o elaborado pela Orbent para o cliente ${clientName}.

    Regras:
    - Tom profissional, colaborativo e objetivo; evite exageros (‚Äú√© um prazer‚Äù, ‚Äúcom satisfa√ß√£o‚Äù etc.).
    - Foque em contexto e clareza: finalidade do plano, organiza√ß√£o das iniciativas, responsabilidades e prazos.
    - Aponte o alinhamento do plano √†s prioridades estrat√©gicas do cliente.
    - Realce a atua√ß√£o da Orbent como parceira no acompanhamento das a√ß√µes.
    - Formato: par√°grafo corrido, alinhado justificado, sem n√∫meros/dados (eles estar√£o nos quadros).

    ### Considera√ß√µes Finais
    Redija as Considera√ß√µes Finais do Plano de A√ß√£o elaborado pela Orbent para o cliente ${clientName}.

    Regras:
    - Tom colaborativo, firme e profissional.
    - Reforce o compromisso conjunto e o acompanhamento sistem√°tico para cumprir prazos e qualidade.
    - Indique a disposi√ß√£o da Orbent em apoiar o cliente em todas as etapas.
    - Formato: par√°grafo corrido, alinhado justificado; evitar frases promocionais e elogios excessivos.

    ---

    **Dados JSON do Plano de A√ß√£o para sua An√°lise (N√£o inclua na sa√≠da):**
    ${JSON.stringify(items, null, 2)}
  `;

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
    });
    return response.text;
  } catch (error) {
    console.error("Error generating summary with Gemini:", error);
    return "Ocorreu um erro ao gerar o relat√≥rio. Por favor, verifique a configura√ß√£o da API e tente novamente.";
  }
};

export const generateActionPlan = async (prompt: string, planReason: PlanReason, planEmissionDate: string, fileContent?: string): Promise<SuggestedActionItem[]> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }
  
  const fileContextPrompt = fileContent
    ? `
    ---
    **CONTEXTO ADICIONAL DE ARQUIVO ANEXADO:**
    O seguinte texto foi extra√≠do de um documento de refer√™ncia (ex: relat√≥rio de auditoria, e-mail, etc.). Use as informa√ß√µes contidas nele como a principal fonte para identificar os desvios e riscos que precisam ser mitigados. As suas sugest√µes de a√ß√£o devem abordar diretamente os pontos levantados neste texto.

    \`\`\`
    ${fileContent}
    \`\`\`
    ---
    `
    : '';
    
  const formattedEmissionDate = safeFormatDate(planEmissionDate);


  const fullPrompt = `
    Aja como um consultor de gest√£o s√™nior da Orbent, especializado na ind√∫stria de food service e em conformidade com as normas regulat√≥rias brasileiras. Sua tarefa √© criar um plano de a√ß√£o estrat√©gico e detalhado com base no problema ou objetivo fornecido.

    **Sua Tarefa:**
    **Regra principal: FRAGMENTE o objetivo em v√°rias a√ß√µes menores, espec√≠ficas e independentes.** Um bom plano de a√ß√£o tem v√°rias etapas claras, n√£o apenas uma ou duas a√ß√µes gen√©ricas. Gere uma lista de 3 a 5 a√ß√µes.

    **REGRAS OBRIGAT√ìRIAS DE CONTEXTO (MUITO IMPORTANTE):**
    1.  **Origem Fixa:** A 'origem' de TODAS as a√ß√µes que voc√™ gerar DEVE ser obrigatoriamente: **"${planReason}"**. N√£o use nenhuma outra categoria de origem.
    2.  **Prazo V√°lido:** O 'prazo' (data de t√©rmino) de TODAS as a√ß√µes que voc√™ gerar DEVE ser uma data FUTURA em rela√ß√£o √† data de emiss√£o do plano. A data de emiss√£o do plano √© **${formattedEmissionDate}**. Portanto, todos os prazos devem ser posteriores a esta data. N√£o gere prazos anteriores ou iguais a esta data.

    ---
    **DIRETRIZ DE LINGUAGEM E TOM (REGRA MAIS IMPORTANTE DE TODAS):**

    Sua tarefa principal √© descrever a√ß√µes como **melhorias ou refor√ßos de processos que j√° existem**, e n√£o como a cria√ß√£o de algo novo. A linguagem deve ser protetiva para a empresa Orbent, mostrando proatividade e continuidade.

    **1. VERBOS PROIBIDOS (NUNCA USE):**
    Estes verbos sugerem que algo est√° sendo criado do zero. Evite-os completamente.
    - üö´ Desenvolver, Implementar, Criar, Elaborar, Construir, Iniciar, Estabelecer.

    **2. VERBOS OBRIGAT√ìRIOS (USE SEMPRE ESTES):**
    Use esta lista para construir todas as suas frases de a√ß√£o.
    - ‚úÖ **Refor√ßar:** Para intensificar uma pr√°tica existente.
    - ‚úÖ **Manter:** Para a√ß√µes que j√° est√£o em curso e continuar√£o.
    - ‚úÖ **Ajustar:** Para pequenas corre√ß√µes ou adapta√ß√µes.
    - ‚úÖ **Ampliar:** Para aumentar o alcance de algo j√° existente.
    - ‚úÖ **Intensificar:** Para aumentar a frequ√™ncia ou rigor da a√ß√£o.
    - ‚úÖ **Consolidar:** Para garantir a estabilidade de um processo.
    - ‚úÖ **Fortalecer:** Para dar mais robustez a uma pr√°tica.
    - ‚úÖ **Atualizar:** Para modernizar uma pr√°tica cont√≠nua.
    - ‚úÖ **Aprimorar:** Para melhorias cont√≠nuas dentro do escopo.
    - ‚úÖ **Padronizar:** Para uniformizar pr√°ticas j√° aplicadas.

    **3. EXEMPLOS DE APLICA√á√ÉO (SIGA ESTE PADR√ÉO):**
    - **ERRADO:** "Desenvolver e implementar auditorias internas"
    - **CERTO:** "Refor√ßar e manter as auditorias internas j√° previstas no escopo"
    
    - **ERRADO:** "Criar um fluxo de comunica√ß√£o com gestores"
    - **CERTO:** "Consolidar e intensificar o fluxo de comunica√ß√£o j√° praticado com gestores"

    - **ERRADO:** "Elaborar novos controles de higieniza√ß√£o"
    - **CERTO:** "Padronizar e refor√ßar os controles de higieniza√ß√£o em vigor"

    **4. TOM GERAL:**
    Use constru√ß√µes que mostrem que as a√ß√µes j√° est√£o em andamento: "refor√ßadas", "ajustadas", "em andamento cont√≠nuo", "intensificadas", "em execu√ß√£o", "em amplia√ß√£o", "com fluxo refor√ßado e monitoramento".
    ---
    ${fileContextPrompt}
    **O objetivo √©: "${prompt}"**

    Para cada item do plano de a√ß√£o, preencha os seguintes campos, **respeitando estritamente TODAS as regras acima, especialmente a DIRETRIZ DE LINGUAGEM E TOM**:
    - desvioPontoMelhoria: Crie um t√≠tulo curto para a a√ß√£o (este campo √© o "Desvio/Ponto de Melhoria"), **seguindo as regras de estilo e tom.**
    - origem: Use o valor obrigat√≥rio: **"${planReason}"**.
    - acaoParaMitigacao: Descreva a a√ß√£o a ser tomada de forma detalhada (este campo √© a "A√ß√£o para mitiga√ß√£o"), **seguindo as regras de estilo e tom.**
    - departamentosEnvolvidos: Atribua a um ou mais departamentos (este campo √© "Departamentos Envolvidos"). A sa√≠da DEVE ser uma lista de strings.
    - responsavel: Escolha um cargo da seguinte lista: ${JSON.stringify(validResponsibles)}.
    - pilarEstrategico: Classifique a a√ß√£o em UM dos seguintes pilares: ${JSON.stringify(strategicPillars)}.
    - prazo: Estime uma data de prazo realista no formato AAAA-MM-DD, **posterior a ${formattedEmissionDate}**.
    - tipo: Classifique a a√ß√£o como 'Corretiva', 'Preventiva' ou 'Melhoria'.
    - priority: Classifique a prioridade como 'Alta', 'M√©dia', ou 'Baixa'.
    - evidencia: Descreva qual ser√° a evid√™ncia concreta de que a tarefa foi conclu√≠da (ex: "Checklist de Boas Pr√°ticas preenchido", "Certificado de calibra√ß√£o de equipamento", "Plano de descarte de res√≠duos documentado").
    - verificacao: Descreva como a efic√°cia da a√ß√£o ser√° verificada. Qual √© o resultado esperado ou o KPI que ser√° impactado? (ex: "Redu√ß√£o de 100% das n√£o-conformidades na pr√≥xima auditoria sanit√°ria", "Aprova√ß√£o na inspe√ß√£o do corpo de bombeiros").

    A sa√≠da DEVE ser um JSON v√°lido contendo uma lista de objetos.
  `;

  const responseSchema = {
    type: Type.ARRAY,
    items: {
      type: Type.OBJECT,
      properties: {
        desvioPontoMelhoria: { type: Type.STRING, description: 'O "Desvio/Ponto de Melhoria". Um t√≠tulo curto para a a√ß√£o.' },
        origem: { type: Type.STRING, description: 'A origem ou motivo da a√ß√£o.', enum: Object.values(PlanReason) },
        acaoParaMitigacao: { type: Type.STRING, description: 'A "A√ß√£o para mitiga√ß√£o". Descri√ß√£o detalhada da a√ß√£o a ser tomada.' },
        departamentosEnvolvidos: { 
            type: Type.ARRAY,
            items: { type: Type.STRING },
            description: 'Os "Departamentos Envolvidos". Uma lista de um ou mais departamentos respons√°veis.' 
        },
        responsavel: { type: Type.STRING, description: 'Um cargo para o respons√°vel.', enum: validResponsibles },
        pilarEstrategico: { type: Type.STRING, description: 'O pilar estrat√©gico da a√ß√£o.', enum: strategicPillars },
        prazo: { type: Type.STRING, description: "Data no formato AAAA-MM-DD" },
        tipo: { type: Type.STRING, enum: Object.values(ActionType), description: 'O tipo da a√ß√£o.' },
        priority: { type: Type.STRING, enum: Object.values(ActionPriority), description: 'A prioridade da a√ß√£o.' },
        evidencia: { type: Type.STRING, description: 'A evid√™ncia concreta de que a tarefa foi conclu√≠da.' },
        verificacao: { type: Type.STRING, description: 'Como a efic√°cia da a√ß√£o ser√° verificada.' },
      },
      required: ['desvioPontoMelhoria', 'acaoParaMitigacao', 'departamentosEnvolvidos', 'responsavel', 'prazo', 'origem', 'tipo', 'priority', 'evidencia', 'verificacao', 'pilarEstrategico']
    }
  };

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: fullPrompt,
      config: {
          responseMimeType: 'application/json',
          responseSchema: responseSchema,
      }
    });
    
    const resultText = response.text;
    if (!resultText) {
        const errorDetails = JSON.stringify(response, null, 2);
        console.error("Unexpected AI response structure in generateActionPlan:", errorDetails);
        throw new Error("A resposta da IA n√£o continha a parte de texto esperada.");
    }

    try {
        const cleanedResult = resultText.trim().replace(/^```json\s*|```\s*$/g, '');
        return JSON.parse(cleanedResult);
    } catch (e) {
        console.error("Failed to parse JSON string from Gemini:", e, "Original string:", resultText);
        throw new Error("A resposta da IA n√£o √© um JSON v√°lido.");
    }

  } catch (error) {
    console.error("Error generating action plan with Gemini:", error);
    throw new Error("Ocorreu um erro ao gerar o plano de a√ß√£o. Por favor, tente novamente.");
  }
};


export const generateSubTasks = async (goal: string, fileContent?: string): Promise<SuggestedActionItem[]> => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable not set");
    }

    const today = new Date().toISOString().split('T')[0];
    
    const fileAnalysisPrompt = fileContent
    ? `
    **MISS√ÉO PRINCIPAL: AN√ÅLISE DE DOCUMENTO**
    Sua tarefa principal √© analisar o conte√∫do do documento anexado, identificar CADA desvio, n√£o-conformidade ou ponto de melhoria mencionado, e criar uma a√ß√£o espec√≠fica e detalhada para CADA UM deles. Seja exaustivo. Para cada problema distinto encontrado no texto, gere uma a√ß√£o correspondente. Se o documento listar 5 problemas, voc√™ DEVE gerar 5 ou mais a√ß√µes detalhadas.

    **DOCUMENTO PARA AN√ÅLISE:**
    \`\`\`
    ${fileContent}
    \`\`\`
    ---
    `
    : '';

    const goalPrompt = `
        **OBJETIVO GERAL (TEMA):**
        Use o seguinte objetivo como o tema principal para sua an√°lise e cria√ß√£o de a√ß√µes: "${goal}"
    `;

    const prompt = `
        Aja como um gerente de projetos s√™nior e especialista em conformidade e planejamento estrat√©gico.
        ${fileContent ? fileAnalysisPrompt : ''}
        ${goalPrompt}

        **Sua Miss√£o Detalhada:**
        1.  **Decomposi√ß√£o Exaustiva:** ${fileContent ? 'Com base no documento fornecido, fragmente CADA ponto cr√≠tico em uma a√ß√£o individual.' : 'Quebre o objetivo principal em 3 a 5 sub-tarefas espec√≠ficas, mensur√°veis e independentes.'} Cada sub-tarefa deve ser um passo claro para alcan√ßar o objetivo maior.
        2.  **Detalhamento:** Para cada sub-tarefa, preencha todos os campos necess√°rios para criar um item de a√ß√£o completo.
        3.  **Linguagem Proativa:** Use uma linguagem clara, direta e focada na a√ß√£o. Verbos como "Analisar", "Verificar", "Implementar", "Corrigir" e "Padronizar" s√£o apropriados.

        **Regras de Preenchimento:**
        -   **desvioPontoMelhoria:** Deve ser o nome da sub-tarefa, identificando claramente o problema ou desvio encontrado no documento. (Ex: "Falta de registro de temperatura na c√¢mara fria 2", "Procedimento de higieniza√ß√£o de bancadas n√£o seguido").
        -   **acaoParaMitigacao:** Descreva em detalhes as atividades necess√°rias para corrigir ou mitigar o desvio. Seja espec√≠fico.
        -   **origem:** Use o valor fixo: "${PlanReason.PLANEJAMENTO_IA}".
        -   **departamentosEnvolvidos:** Atribua a um ou mais departamentos. A sa√≠da deve ser uma lista de strings.
        -   **responsavel:** Escolha o cargo mais apropriado da seguinte lista: ${JSON.stringify(validResponsibles)}.
        -   **pilarEstrategico:** Classifique a a√ß√£o em UM dos seguintes pilares: ${JSON.stringify(strategicPillars)}.
        -   **prazo:** Estime uma data de conclus√£o realista no formato AAAA-MM-DD, que seja **posterior a ${today}**.
        -   **tipo:** Classifique a a√ß√£o como 'Corretiva', 'Preventiva' ou 'Melhoria'. A maioria ser√° 'Corretiva' ou 'Melhoria' neste contexto.
        -   **priority:** Classifique a prioridade como 'Alta', 'M√©dia', ou 'Baixa', com base na gravidade do desvio.
        -   **evidencia:** Descreva qual ser√° a "prova" de que a tarefa foi conclu√≠da (ex: "Planilhas de registro de temperatura preenchidas dos √∫ltimos 30 dias", "Checklist de higieniza√ß√£o assinado pela equipe", "Relat√≥rio fotogr√°fico da corre√ß√£o").
        -   **verificacao:** Descreva como o sucesso da tarefa ser√° medido (ex: "100% de conformidade nos registros de temperatura na pr√≥xima auditoria interna", "Redu√ß√£o a zero das n√£o-conformidades de higieniza√ß√£o").

        A sa√≠da DEVE ser um JSON v√°lido contendo uma lista de objetos.
    `;

    const responseSchema = {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            desvioPontoMelhoria: { type: Type.STRING, description: 'O "Desvio/Ponto de Melhoria". O nome da sub-tarefa.' },
            origem: { type: Type.STRING, enum: [PlanReason.PLANEJAMENTO_IA] },
            acaoParaMitigacao: { type: Type.STRING, description: 'A "A√ß√£o para mitiga√ß√£o". Descri√ß√£o detalhada da sub-tarefa.' },
            departamentosEnvolvidos: { 
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: 'Os "Departamentos Envolvidos".' 
            },
            responsavel: { type: Type.STRING, enum: validResponsibles },
            pilarEstrategico: { type: Type.STRING, enum: strategicPillars },
            prazo: { type: Type.STRING, description: "Data no formato AAAA-MM-DD" },
            tipo: { type: Type.STRING, enum: Object.values(ActionType) },
            priority: { type: Type.STRING, enum: Object.values(ActionPriority) },
            evidencia: { type: Type.STRING, description: 'A evid√™ncia de conclus√£o.' },
            verificacao: { type: Type.STRING, description: 'A verifica√ß√£o de efic√°cia.' },
          },
          required: ['desvioPontoMelhoria', 'acaoParaMitigacao', 'departamentosEnvolvidos', 'responsavel', 'prazo', 'origem', 'tipo', 'priority', 'evidencia', 'verificacao', 'pilarEstrategico']
        }
    };
    
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                responseMimeType: 'application/json',
                responseSchema: responseSchema,
            }
        });

        const resultText = response.text;
        if (!resultText) {
            const errorDetails = JSON.stringify(response, null, 2);
            console.error("Unexpected AI response structure in generateSubTasks:", errorDetails);
            throw new Error("A resposta da IA n√£o continha a parte de texto esperada.");
        }

        try {
            const cleanedResult = resultText.trim().replace(/^```json\s*|```\s*$/g, '');
            return JSON.parse(cleanedResult);
        } catch (e) {
            console.error("Failed to parse JSON string from Gemini:", e, "Original string:", resultText);
            throw new Error("A resposta da IA n√£o √© um JSON v√°lido.");
        }

    } catch (error) {
        console.error("Error generating sub-tasks with Gemini:", error);
        throw new Error("Ocorreu um erro ao gerar o plano de a√ß√£o. Por favor, tente novamente.");
    }
};

export const generateSubTasksForAction = async (parentAction: SuggestedActionItem): Promise<SuggestedActionItem[]> => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable not set");
    }

    const today = new Date().toISOString().split('T')[0];
    const parentDeadline = parentAction.prazo ? ` O prazo da tarefa principal √© ${parentAction.prazo}, ent√£o as sub-tarefas n√£o devem exceder esta data.` : '';

    const prompt = `
        Aja como um gerente de projetos s√™nior. Sua tarefa √© decompor uma a√ß√£o principal em 1 a 3 sub-tarefas menores, mais detalhadas e acion√°veis.

        **A√á√ÉO PRINCIPAL PARA DECOMPOR:**
        - **T√≠tulo:** ${parentAction.desvioPontoMelhoria}
        - **Descri√ß√£o:** ${parentAction.acaoParaMitigacao}
        - **Respons√°vel Principal:** ${parentAction.responsavel}
        - **Pilar Estrat√©gico:** ${parentAction.pilarEstrategico}

        **Sua Miss√£o:**
        Crie de 1 a 3 sub-tarefas que detalhem os passos necess√°rios para completar a a√ß√£o principal. Cada sub-tarefa deve ser um item de a√ß√£o completo e independente.

        **Regras de Preenchimento (para cada sub-tarefa):**
        -   **desvioPontoMelhoria:** O nome da sub-tarefa. **REGRA:** O nome DEVE come√ßar com um prefixo que a identifique como sub-tarefa, como "Sub: " ou "Etapa: ". Exemplo: "Sub: Levantar requisitos".
        -   **acaoParaMitigacao:** Descreva as atividades espec√≠ficas da sub-tarefa.
        -   **origem:** Use o valor fixo: **"${parentAction.origem}"**.
        -   **departamentosEnvolvidos:** Atribua a um ou mais departamentos. Pode ser o mesmo da a√ß√£o principal.
        -   **responsavel:** Herde o respons√°vel da a√ß√£o principal ('${parentAction.responsavel}') ou escolha um outro da lista: ${JSON.stringify(validResponsibles)}.
        -   **pilarEstrategico:** Deve ser o mesmo da a√ß√£o principal: **"${parentAction.pilarEstrategico}"**.
        -   **prazo:** Estime uma data de conclus√£o realista no formato AAAA-MM-DD. Deve ser **posterior a ${today}**. ${parentDeadline}
        -   **tipo:** Classifique a a√ß√£o como 'Corretiva', 'Preventiva' ou 'Melhoria'.
        -   **priority:** Classifique a prioridade. Pode ser a mesma da a√ß√£o principal ou diferente, se apropriado.
        -   **evidencia:** Descreva a "prova" de conclus√£o para esta sub-tarefa espec√≠fica.
        -   **verificacao:** Descreva como o sucesso desta sub-tarefa ser√° medido.

        A sa√≠da DEVE ser um JSON v√°lido contendo uma lista de objetos.
    `;

    const responseSchema = {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            desvioPontoMelhoria: { type: Type.STRING, description: 'O "Desvio/Ponto de Melhoria". Um t√≠tulo curto para a sub-tarefa.' },
            origem: { type: Type.STRING, description: 'A origem ou motivo da a√ß√£o.', enum: Object.values(PlanReason) },
            acaoParaMitigacao: { type: Type.STRING, description: 'A "A√ß√£o para mitiga√ß√£o". Descri√ß√£o detalhada da sub-tarefa.' },
            departamentosEnvolvidos: { 
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: 'Os "Departamentos Envolvidos".' 
            },
            responsavel: { type: Type.STRING, enum: validResponsibles },
            pilarEstrategico: { type: Type.STRING, enum: strategicPillars },
            prazo: { type: Type.STRING, description: "Data no formato AAAA-MM-DD" },
            tipo: { type: Type.STRING, enum: Object.values(ActionType) },
            priority: { type: Type.STRING, enum: Object.values(ActionPriority) },
            evidencia: { type: Type.STRING, description: 'A evid√™ncia de conclus√£o.' },
            verificacao: { type: Type.STRING, description: 'A verifica√ß√£o de efic√°cia.' },
          },
          required: ['desvioPontoMelhoria', 'acaoParaMitigacao', 'departamentosEnvolvidos', 'responsavel', 'prazo', 'origem', 'tipo', 'priority', 'evidencia', 'verificacao', 'pilarEstrategico']
        }
    };
    
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                responseMimeType: 'application/json',
                responseSchema: responseSchema,
            }
        });
        
        const resultText = response.text;
        if (!resultText) {
            const errorDetails = JSON.stringify(response, null, 2);
            console.error("Unexpected AI response structure in generateSubTasksForAction:", errorDetails);
            throw new Error("A resposta da IA n√£o continha a parte de texto esperada.");
        }
        
        try {
            const cleanedResult = resultText.trim().replace(/^```json\s*|```\s*$/g, '');
            return JSON.parse(cleanedResult);
        } catch (e) {
            console.error("Failed to parse JSON string from Gemini:", e, "Original string:", resultText);
            throw new Error("A resposta da IA n√£o √© um JSON v√°lido.");
        }

    } catch (error) {
        console.error("Error generating sub-tasks for action with Gemini:", error);
        throw new Error("Ocorreu um erro ao gerar as sub-tarefas. Por favor, tente novamente.");
    }
};
