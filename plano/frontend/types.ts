import React from 'react';

export enum ActionStatus {
  PENDENTE = 'Pendente',
  CONCLUIDO = 'Concluído',
  EXECUCAO_CONTINUA = 'Execução contínua monitorada',
  ACOES_REFORCADAS = 'Ações reforçadas e em expansão',
  PROCESSOS_INTENSIFICADOS = 'Processos intensificados e otimizados',
  AJUSTADAS_EM_EXECUCAO = 'Ajustadas e em plena execução',
  REFORCO_EM_EXECUCAO = 'Reforço em execução com monitoramento ativo',
}

export enum ActionPriority {
  ALTA = 'Alta',
  MEDIA = 'Média',
  BAIXA = 'Baixa',
}

export enum ActionType {
  CORRETIVA = 'Corretiva',
  PREVENTIVA = 'Preventiva',
  MELHORIA = 'Melhoria',
}

export interface ActionItem {
  id: number;
  desvioPontoMelhoria: string;
  origem: PlanReason;
  acaoParaMitigacao: string;
  departamentosEnvolvidos: string[];
  responsavel: string;
  prazo: string;
  evidencia: string;
  verificacao: string;
  status: ActionStatus;
  tipo: ActionType;
  priority: ActionPriority;
  pilarEstrategico: string;
  anexos?: File[];
  tags?: string[];
}

// Omit only fields that are set upon creation/approval, not generated by AI
export type SuggestedActionItem = Omit<ActionItem, 'id' | 'status' | 'anexos'> & { tags?: string[] };

export enum PlanReason {
  FEEDBACK = 'Feedback de Cliente',
  AUDITORIA_INTERNA = 'Auditoria Interna',
  AUDITORIA_EXTERNA = 'Auditoria Externa',
  PLANEJAMENTO_IA = 'Planejamento IA',
  OUTROS = 'Outros',
}

export enum PlanStatus {
  EM_ANDAMENTO = 'Em Andamento',
  CONCLUIDO = 'Concluído',
  CANCELADO = 'Cancelado',
}

export type NewPlanData = {
  clientName: string;
  planName: string;
  emissionDate: string;
  reason: PlanReason;
  planOwnerName: string;
};

export interface Plan {
  id: number;
  planCode: string;
  clientName: string;
  planName: string;
  emissionDate: string;
  conclusionDate?: string;
  reason: PlanReason;
  ownerId: number;
  planOwnerName: string;
  actionItems: ActionItem[];
  status?: PlanStatus;
}

export interface SavedReport {
  id: number;
  planId: number;
  generatedAt: string;
  reportName: string;
  summaryContent: string;
  dataUsed: ActionItem[];
}


export type PlanView = 'dashboard' | 'plan' | 'creator' | 'report' | 'global-report' | 'ai-planner';

export interface NavItem {
    id: PlanView;
    label: string;
    icon: React.FC<{ className?: string }>;
}

export interface SearchResultPlan extends Plan {
    matchingActionItems: ActionItem[];
    planMatch: boolean;
}